use crate::lexer::tokens::*;
use crate::lexer::LexicalError;
use crate::executor::ast::*;

grammar<'input>(input: &'input str);

pub SourceUnit:SourceUnit<'input> = {
    SourceUnitPart+ => SourceUnit(<>)
};

SourceUnitPart:SourceUnitPart<'input> = {
    Statement => SourceUnitPart::Statement(<>),
};

Statement:Statement<'input> = {
    <a:@L> Declaration <id:Expression> ";" <b:@R> => Statement::Declaration((a,b),id),
    <a:@L> <l:Expression> "=" <r:Expression> ";" <b:@R> => Statement::Assignment((a,b),l,r),
    <a:@L> Write <e:Expression> ";" <b:@R> => Statement::Write((a,b),e),
    <a:@L> If <condition:Conditional> "{" <s:SourceUnit> "}" <b:@R> => Statement::Conditional((a,b),condition,s,None),
    <a:@L> If <condition:Conditional> "{" <s:SourceUnit> "}" Else "{" <f:SourceUnit> "}" <b:@R> => Statement::Conditional((a,b),condition,s,Some(f)),
    <a:@L> Loop <condition:Conditional> "{" <s:SourceUnit> "}" <b:@R> => Statement::Loop((a,b),condition,s)
};

Expression:Expression<'input>= {
    ArithExpression
}

Conditional:Expression<'input> = {
    <l:Expression> "um"  <r:Expression> "um" <a:@L> "==" <b:@R> => Expression::Equals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "um" <r:Expression> "um" <a:@L> "!=" <b:@R>  => Expression::NotEquals((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "ne_kal" <l:Expression> <a:@L> ">" <b:@R> => Expression::GreaterThan((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "ne_kal" <l:Expression> <a:@L> "<" <b:@R> => Expression::LessThan((a,b),Box::new(l),Box::new(r)),
    Term,
};

ArithExpression: Expression<'input> = {
    <l:ArithExpression> <a:@L> "+" <b:@R> <r:Factor> => Expression::Add((a,b),Box::new(l),Box::new(r)),
    <l:ArithExpression> <a:@L> "-" <b:@R> <r:Factor> => Expression::Subtract((a,b),Box::new(l),Box::new(r)),
    Factor,
};

Factor: Expression<'input>= {
    <l:Factor> <a:@L> "*" <b:@R> <r:Unary> => Expression::Multiply((a,b),Box::new(l),Box::new(r)),
    <l:Factor> <a:@L> "/" <b:@R> <r:Unary> => Expression::Divide((a,b),Box::new(l),Box::new(r)),
    <l:Factor> <a:@L> "%" <b:@R> <r:Unary> => Expression::Modulo((a,b),Box::new(l),Box::new(r)),
    Unary,
};

Unary:Expression<'input> = {
    <a:@L> "-" <b:@R> <r:Unary> => Expression::UnaryMinus((a,b),Box::new(r)),
    Term
};

Term: Expression<'input>= {
    <a:@L> <v:Integer> <b:@R> => Expression::Integer((a,b),v),
    <a:@L> <id:Identifier> <b:@R> => Expression::Symbol((a,b),id),
    <a:@L> <string:StringLiteral> <b:@R> => Expression::StringLiteral((a,b),string),
    <a:@L> <d:InputNumber> <b:@R> => Expression::InputNumber((a,b)),
    <a:@L> <d:InputString> <b:@R> => Expression::InputString((a,b)),
    "(" <e:Expression> ")" => e
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum TokenType<'input> {
        Identifier => TokenType::Symbol(<&'input str>),
        ";" => TokenType::SemiColon,
        Declaration => TokenType::Declaration,
        "=" => TokenType::Assignment,
        Integer => TokenType::Number(i64),
        StringLiteral => TokenType::Literal(usize),
        "+" => TokenType::Plus,
        "-" => TokenType::Minus,
        "*" => TokenType::Product,
        "/" => TokenType::Divide,
        "(" => TokenType::OpenParantheses,
        ")" => TokenType::CloseParantheses,
        Write => TokenType::Write,
        If => TokenType::If,
        Else => TokenType::Else,
        ">" => TokenType::GreaterThan,
        "<" => TokenType::LessThan,
        "==" => TokenType::EqualTo,
        "!=" => TokenType::NotEqual,
        "{" => TokenType::LeftBrace,
        "}" => TokenType::RightBrace,
        "%" => TokenType::Modulo,
        "um" => TokenType::Um,
        "ne_kal" => TokenType::Nekal,
        Loop => TokenType::Loop,
        InputNumber => TokenType::InputNumber,
        InputString => TokenType::InputString,
        
    }
}